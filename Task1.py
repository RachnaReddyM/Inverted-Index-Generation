import requests
import os
from string import maketrans
from bs4 import BeautifulSoup
import re
import time


#fetch raw HTML files from below path
docs_source_path = "D:\IR\HW3\docs"

# write the parsed text files to the below path
docs_dest_path = "D:\IR\HW3\corpus"

# filenamelist contains the list of raw HTML file names
filenamelist = os.listdir(docs_source_path)

def ignore_content(soup):
  # remove all content in table
    for tables in soup("table"):
      tables.decompose()

  # remove images
    for images in soup("img"):
      images.decompose()

  # remove the formulas from the page
    for semantics in soup("semantics"):
      semantics.decompose()

def generate_text(c,p):
  
  # consider text present only in the below tags
  tags_of_text=['h1', 'h2', 'h3', 'h4', 'p']

  # string of special characters to be removed
  specialchars="`~@#$%^&*_+|(){\}[]<=>/;"
  removespecialchars="                        "

  # string of punctuations to be removed
  punctuations="!\":'?"
  removepunc="     "


  for filename in filenamelist:
    print filename
    f = open(docs_source_path + '\\' + filename, 'r+')
    raw_data=f.read()
    soup = BeautifulSoup(raw_data, 'html.parser')
    textdata=[]
    datastring=""
    ignore_content(soup)

    for data in soup.find_all(tags_of_text):
      datastring+=data.text+' '

    # remove new line character from content
    datastring=re.sub('\\n','',datastring)

    content=str(datastring.encode('ascii','ignore').decode('ascii'))

    # remove citation references like [1][2]..
    content_citation=re.sub('\\[[0-9,.]*\\]','',content)

    # remove . , that comes in beginnig, between or end of alphabets 
    content_punc=re.sub('(?<=[^0-9])[.,]|[.,](?=[^0-9])','',content_citation)

    # maketrans- translates the given characters to spaces.
    spremove=maketrans(specialchars,removespecialchars)
    content_available=content_punc.translate(spremove)

    # performs casefolding
    if(c=="y"):
      content_available=content_available.lower()
    
    # punctuation handler
    if(p=="y"):
      puncremove=maketrans(punctuations,removepunc)
      content_available=content_available.translate(puncremove)
    
    # to remove multiple whitespaces (generated by substituting special characters and 
    # punctuations with whitespaces)
    content_final=re.sub('\s\s+',' ',content_available)
    name_of_file=filename.split('.html')
    f= open(docs_dest_path + '\\' + name_of_file[0] +'.txt','w')

    # writing parsed content to a file
    f.write(content_final)

def _mainparser():

    # if casefolding needs to done, the variable "casefolding" should be set to "Y"
    # else, "N"
    # if punctuations should be handled, the variable "punctuation" should be to "Y"
    # else, "N"

    casefolding = "Y"
    punctuation = "Y"

    generate_text(casefolding.lower(),punctuation.lower())


_mainparser()