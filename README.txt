Files Submitted:

Task 1 -------> Task1.py

Task 2 -------> Task2.py
                Task_2_Index_Unigram.txt
                Task_2_Index_Bigram.txt
                Task_2_Index_Trigram.txt
                Task_2_Unigram_tokens.txt
                Task_2_Bigram_tokens.txt
                Task_2_Trigram_tokens.txt

Task 3 -------> Task 3_Unigram_TF.txt
                Task 3_Bigram_TF.txt 
                Task 3_Trigram_TF.txt
                Task 3_Unigram_DF.txt
                Task 3_Bigram_DF.txt
                Task 3_Trigram_DF.txt      



To compile and run Task1.py and Task2.py(includes code for Task 2 and Task 3), the below are required:

1. Python 2.7.14
2. requests library which can be installed using the command:
   pip install requests
3. Beautiful Soup4 library to pull data out of HTML and XML. It can be installed using the command:
   pip install beautifulsoup4

To run Task1.py(Corpus generation):

Libraries required- 

import requests
import os
from string import maketrans
from bs4 import BeautifulSoup
import re
import time

1. This program takes only .html files as input.
2. The directory path of the .html files needs to be included in the Task1.py 
   Variable name- docs_source_path
3. The directory path for the output(.txt) files also needs to be included in the Task1.py 
   Variable name- docs_dest_path
4. Open Command Prompt and move to the directory in which the .py files are placed.
5. Enter the following command:
   python Task1.py


Task1.py (Corpus generation) explaination:
To parse the raw HTML files, i have followed the below:
- ignored the tables, image references and formulas
- Consider only content within the <p>, <h1>, <h2>, <h3> and <h4> tags - since they contain important textual content
- removal of new-line(\n) characters, if any
- removed the citation references - because those numbers aren't required
- retained .(period) and ,(comma) only if it appears between digits - for decimal and huge numbers
- removed special characters like `~@#$%^&*_+|(){\}[]<=>/; as their disappearance in the 
  corpus does not change the meaning of the word
- punctuations like !":'? are removed by default, but by changing the variable(punctuation) value to "N", 
  the punctuations will be retained.
- case-folding is performed by default, but by changing the variable(casefolding) value to "N", 
  case-folding will not be performed
- extra white-spaces that appear from removing special characters or punctuations, are removed as well. 
  Only one white-space between two words is maintained.


To run Task2.py(Inverted Index generation):

Libraries required:

import os
import operator

1. This program takes only .txt files as input.
2. The directory path of the .txt files needs to be included in the Task2.py Variable name- docs_source_path
3. The output files are written in the same directory as Task2.py
4. Open Command Prompt and move to the directory in which the .py files are placed.
5. Enter the following command:
   python Task2.py

Task2.py (Inverted Index generation) explaination:
To generate an inverted index, i have followed the below:
- Added each unique term as a key to a dictionary by parsing each document.
- Everytime a new term appears, its added to the dictionary as the key and it's document ID and 
  the term frequency(in that particular doc) is added as it's values
- Similar dictionary is used to hold inverted index for Bigrams and Trigrams as well. 
- Dictionary is the most efficient data structure for the inverted index as it's search functionality 
  has the least time complexity.
- Task_2_Index_Unigram.txt, Task_2_Index_Bigram.txt and Task_2_Index_Trigram.txt contain the Inverted Index.
- Used a dictionary to store the document ID as the key and the number of tokens in it as the value.
- Number of tokens are stored in Task_2_Unigram_tokens.txt, Task_2_Bigram_tokens.txt and Task_2_Trigram_tokens.txt

Task 3 (Corpus Statistics):
The source code for this task is part of Task2.py itself.
- By taking the Unigram, Bigram, Trigram inverted index as input ( generated in Task 2), the term and 
  it's frequency is calculated and stored in a dictionary.
- The dictionary is sorted in descending order of the term frequencies.
- The sorted dictionary is written to a file.
- Task 3_Unigram_TF.txt, Task 3_Bigram_TF.txt and Task 3_Trigram_TF.txt contain the Term frequency table.

- Similarly, the Document frequency table is also generated by lexographically sorting the dictionary based on the key(terms).
- The sorted dictionary are written to Task 3_Unigram_DF.txt, Task 3_Bigram_DF.txt and Task 3_Trigram_DF.txt

- Stoplist is included in the file Stoplist.txt


Citations:
1. Python- http://www.pythonforbeginners.com/ -- learnt the use of various built-in functions for dictionaries
                                              -- also learnt the usage of "maketrans" method
2. Beautiful Soup - https://beautiful-soup-4.readthedocs.io/en/latest/
3. Python- https://docs.python.org/3/
4. Stack Overflow - to fix few errors faced during the working of dictionaries and regular expressions for parsing the raw HTML files.